{"ast":null,"code":"import * as Yup from \"yup\";\nimport User from \"../models/User\";\n\nclass SessionController {\n  async store(req, res) {\n    const schema = Yup.object().shape({\n      email: Yup.string().required(),\n      password: Yup.string().required()\n    });\n\n    if (!(await schema.isValid(req.body))) {\n      return res.status(400).json({\n        error: \"falha ao validar\"\n      });\n    }\n\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await User.findOne({\n      where: {\n        email\n      }\n    });\n\n    if (!user) {\n      return res.status(401).json({\n        error: \"Usuario nao pertence a base\"\n      });\n    }\n\n    if (!(await user.checkPassword(password))) {\n      return res.status(401).json({\n        error: \"Senha incorreta\"\n      });\n    }\n\n    const {\n      id,\n      name\n    } = user;\n    return res.json({\n      user: {\n        id,\n        name,\n        email\n      }\n    });\n  }\n\n}\n\nexport default new SessionController();","map":{"version":3,"sources":["/home/lucas/Desktop/git/webProj2/src/controllers/SessionController.js"],"names":["Yup","User","SessionController","store","req","res","schema","object","shape","email","string","required","password","isValid","body","status","json","error","user","findOne","where","checkPassword","id","name"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,MAAMC,iBAAN,CAAwB;AACtB,QAAMC,KAAN,CAAYC,GAAZ,EAAiBC,GAAjB,EAAsB;AACpB,UAAMC,MAAM,GAAGN,GAAG,CAACO,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,MAAAA,KAAK,EAAET,GAAG,CAACU,MAAJ,GAAaC,QAAb,EADyB;AAEhCC,MAAAA,QAAQ,EAAEZ,GAAG,CAACU,MAAJ,GAAaC,QAAb;AAFsB,KAAnB,CAAf;;AAKA,QAAI,EAAE,MAAML,MAAM,CAACO,OAAP,CAAeT,GAAG,CAACU,IAAnB,CAAR,CAAJ,EAAuC;AACrC,aAAOT,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,UAAM;AAAER,MAAAA,KAAF;AAASG,MAAAA;AAAT,QAAsBR,GAAG,CAACU,IAAhC;AAEA,UAAMI,IAAI,GAAG,MAAMjB,IAAI,CAACkB,OAAL,CAAa;AAAEC,MAAAA,KAAK,EAAE;AAAEX,QAAAA;AAAF;AAAT,KAAb,CAAnB;;AAEA,QAAI,CAACS,IAAL,EAAW;AACT,aAAOb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AAED,QAAI,EAAE,MAAMC,IAAI,CAACG,aAAL,CAAmBT,QAAnB,CAAR,CAAJ,EAA2C;AACzC,aAAOP,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AAED,UAAM;AAAEK,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAeL,IAArB;AAEA,WAAOb,GAAG,CAACW,IAAJ,CAAS;AACdE,MAAAA,IAAI,EAAE;AACJI,QAAAA,EADI;AAEJC,QAAAA,IAFI;AAGJd,QAAAA;AAHI;AADQ,KAAT,CAAP;AAOD;;AA/BqB;;AAkCxB,eAAe,IAAIP,iBAAJ,EAAf","sourcesContent":["import * as Yup from \"yup\";\n\nimport User from \"../models/User\";\n\nclass SessionController {\n  async store(req, res) {\n    const schema = Yup.object().shape({\n      email: Yup.string().required(),\n      password: Yup.string().required(),\n    });\n\n    if (!(await schema.isValid(req.body))) {\n      return res.status(400).json({ error: \"falha ao validar\" });\n    }\n    const { email, password } = req.body;\n\n    const user = await User.findOne({ where: { email } });\n\n    if (!user) {\n      return res.status(401).json({ error: \"Usuario nao pertence a base\" });\n    }\n\n    if (!(await user.checkPassword(password))) {\n      return res.status(401).json({ error: \"Senha incorreta\" });\n    }\n\n    const { id, name } = user;\n\n    return res.json({\n      user: {\n        id,\n        name,\n        email,\n      },\n    });\n  }\n}\n\nexport default new SessionController();\n"]},"metadata":{},"sourceType":"module"}