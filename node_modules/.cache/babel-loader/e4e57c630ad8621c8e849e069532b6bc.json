{"ast":null,"code":"import * as Yup from \"yup\";\nimport User from \"../models/User\";\n\nclass UserController {\n  async store(req, res) {\n    const schema = Yup.object().shape({\n      name: Yup.string().required().min(3),\n      email: Yup.string().required(),\n      password: Yup.string().required().min(6)\n    });\n\n    if (!(await schema.isValid(req.body))) {\n      return res.status(400).json({\n        error: \"falha ao validar\"\n      });\n    }\n\n    const userExists = await User.findOne({\n      where: {\n        email: req.body.email\n      }\n    });\n\n    if (userExists) {\n      return res.status(400).json({\n        error: \"Usu치rio j치 existente.\"\n      });\n    }\n\n    const {\n      id,\n      name,\n      email,\n      password\n    } = await User.create(req.body);\n    return res.json({\n      id,\n      name,\n      email,\n      password\n    });\n  }\n\n}\n\nexport default new UserController();","map":{"version":3,"sources":["/home/lucas/Desktop/git/webProj2/src/controllers/UserController.js"],"names":["Yup","User","UserController","store","req","res","schema","object","shape","name","string","required","min","email","password","isValid","body","status","json","error","userExists","findOne","where","id","create"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,MAAMC,cAAN,CAAqB;AACnB,QAAMC,KAAN,CAAYC,GAAZ,EAAiBC,GAAjB,EAAsB;AACpB,UAAMC,MAAM,GAAGN,GAAG,CAACO,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,MAAAA,IAAI,EAAET,GAAG,CAACU,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,CAD0B;AAEhCC,MAAAA,KAAK,EAAEb,GAAG,CAACU,MAAJ,GAAaC,QAAb,EAFyB;AAGhCG,MAAAA,QAAQ,EAAEd,GAAG,CAACU,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B;AAHsB,KAAnB,CAAf;;AAMA,QAAI,EAAE,MAAMN,MAAM,CAACS,OAAP,CAAeX,GAAG,CAACY,IAAnB,CAAR,CAAJ,EAAuC;AACrC,aAAOX,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AAED,UAAMC,UAAU,GAAG,MAAMnB,IAAI,CAACoB,OAAL,CAAa;AAAEC,MAAAA,KAAK,EAAE;AAAET,QAAAA,KAAK,EAAET,GAAG,CAACY,IAAJ,CAASH;AAAlB;AAAT,KAAb,CAAzB;;AAEA,QAAIO,UAAJ,EAAgB;AACd,aAAOf,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AAED,UAAM;AAAEI,MAAAA,EAAF;AAAMd,MAAAA,IAAN;AAAYI,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,QAAgC,MAAMb,IAAI,CAACuB,MAAL,CAAYpB,GAAG,CAACY,IAAhB,CAA5C;AAEA,WAAOX,GAAG,CAACa,IAAJ,CAAS;AACdK,MAAAA,EADc;AAEdd,MAAAA,IAFc;AAGdI,MAAAA,KAHc;AAIdC,MAAAA;AAJc,KAAT,CAAP;AAMD;;AA1BkB;;AA6BrB,eAAe,IAAIZ,cAAJ,EAAf","sourcesContent":["import * as Yup from \"yup\";\nimport User from \"../models/User\";\n\nclass UserController {\n  async store(req, res) {\n    const schema = Yup.object().shape({\n      name: Yup.string().required().min(3),\n      email: Yup.string().required(),\n      password: Yup.string().required().min(6),\n    });\n\n    if (!(await schema.isValid(req.body))) {\n      return res.status(400).json({ error: \"falha ao validar\" });\n    }\n\n    const userExists = await User.findOne({ where: { email: req.body.email } });\n\n    if (userExists) {\n      return res.status(400).json({ error: \"Usu치rio j치 existente.\" });\n    }\n\n    const { id, name, email, password } = await User.create(req.body);\n\n    return res.json({\n      id,\n      name,\n      email,\n      password,\n    });\n  }\n}\n\nexport default new UserController();\n"]},"metadata":{},"sourceType":"module"}